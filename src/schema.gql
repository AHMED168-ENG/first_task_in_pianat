# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ConversationModel {
  id: String!
  From: String!
  To: String!
  hasShourtcut: Boolean
  FromMessage: [UserMessage!]!
  conversation_user_from: User!
  conversation_user_to: User!
}

type UserMessage {
  id: String!
  message: String!
  from: String!
  to: String!
  isSeen: Boolean!
  conversation: ConversationModel!
}

type User {
  """id"""
  id: String!
  name: String!
  email: String!
  password: String!
  age: Int
  addres: String
  roles: String
  isAdmin: Boolean
  isActive: Boolean
  user_message_from: [UserMessage!]!
}

type UserFrind {
  id: String!
  userId: String!
  frindesId: [String!]!
  date: [Timestamp!]!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type UserRequest {
  id: String!
  to: String!
  from: [String!]!
  date: [Timestamp!]!
  isSeen: [Boolean!]!
}

type PostReaction {
  id: String!
  postId: String!
  usersId: [String!]!
  types: [String!]!
  createAtLikes: [String!]!
  PostReactionPost: [Posts!]!
}

type Posts {
  id: String!
  userId: String!
  post: String!
  image: String!
  video: String!
  postComments: [Comments!]!
  postPostReaction: [PostReaction!]!
  postUser: User!
}

type Comments {
  id: String!
  comment: String!
  userId: String!
  postId: String!
  commentPost: [Posts!]!
  commentsUser: User!
}

type Query {
  findAllUser: [User!]!
  findUser(id: String!): User!
  findUserByEmail(email: String!): User!
  findrequestThatSeen(to: String!): [User!]!
  findrequestUsers(to: String!): [User!]!
  userRequest(id: String!): UserRequest!
  findAllFrindes(userId: String!): [User!]!
  userFrind(userId: String!): UserFrind!
  testingg: String!
  findAllPosts: [Posts!]!
  findPost(userId: String!): Posts!
  FindAllComments(userId: String!, offset: Int!): [Comments!]!
  postReaction(userId: String!): PostReaction!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!, id: String!): Boolean!
  removeUser(id: String!): Boolean!
  activeUser(id: String!): String!
  mackUserAdmin(id: String!): Boolean!
  signInUser(signInUserInput: SignInUserInput!): String!
  signUpUser(signUpUserInput: CreateUserInput!): User!
  resetPassword(resetPasswordInput: ResetPassword!): Boolean!
  createConversation(createConversationInput: CreateConversationInput!): Boolean!
  findAllConversationWithUserWithLastMessage(From: String!): [ConversationModel!]!
  removeConversation(id: String!): ConversationModel!
  createUserMessage(createUserMessageInput: CreateUserMessageInput!): UserMessage!
  findAllUserMessage(MyMessagesWithUser: MyMessagesWithUser!): [UserMessage!]!
  updateUserMessage(id: String!, updateUserMessageInput: UpdateUserMessageInput!): Boolean!
  removeUserMessage(id: String!): Boolean!
  requestOperation(createUserRequestInput: operation_request_input!): String!
  acceptRequest(operation_Frindes: operation_request_input!): String!
  changeSeenRequest(to: String!): String!
  createPost(createPostInput: CreatePostInput!): Posts!
  uploadPhoto(files: Upload!): Boolean!
  updatePost(updatePostInput: UpdatePostInput!): Boolean!
  removePost(userId: String!): Boolean!
  createComment(createCommentInput: CreateCommentInput!): Comments!
  updateComment(updateCommentInput: UpdateCommentInput!): Boolean!
  removeComment(id: String!): Boolean!
  createPostReaction(createPostReactionInput: CreatePostReactionInput!): PostReaction!
  updatePostReaction(updatePostReactionInput: UpdatePostReactionInput!): PostReaction!
  removeFromPostReact(postId: String!, userId: String!): Boolean!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  age: Int
  addres: String
}

input UpdateUserInput {
  name: String
  email: String
  age: Int
  addres: String
}

input SignInUserInput {
  email: String!
  password: String!
  signAll: Boolean!
}

input ResetPassword {
  email: String!
  password: String!
  newPassword: String!
}

input CreateConversationInput {
  From: String!
  To: String!
}

input CreateUserMessageInput {
  message: String!
  from: String!
  to: String!
}

input MyMessagesWithUser {
  from: String!
  to: String!
  order: String!
}

input UpdateUserMessageInput {
  message: String!
}

input operation_request_input {
  from: String!
  to: String!
}

input CreatePostInput {
  userId: String!
  post: String
  image: String
  video: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UpdatePostInput {
  userId: String!
  post: String
  image: String
  video: String
}

input CreateCommentInput {
  comment: String!
  userId: String!
  postId: String!
}

input UpdateCommentInput {
  comment: String!
  userId: String!
  postId: String!
}

input CreatePostReactionInput {
  postId: String!
  userId: String!
  type: String!
}

input UpdatePostReactionInput {
  postId: String!
  usersId: String!
  types: String!
}

type Subscription {
  sendMessageNotification(frindId: String!): UserMessage!
  addRequest(frindId: String!): String!
  removeRequest(frindId: String!): String!
  removeFrind(frindId: String!): String!
  frindAdded(frindId: String!): String!
  addPostNotification(frindId: String!): [User!]!
}